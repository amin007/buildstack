#!/bin/bash
# cenbia main build script: nawawi@rutweb.com

. ./build.d/bootstrap.sh;
[ -z "${_BOOTSTRAP}" ] && { echo "Load failed"; exit 1; };

# functions
_echo() {
    local msg="$1";
    local status="$2";
    if [ "$status" = "false" ]; then
        echo "@@ ERROR: $msg";
        return 1;
    elif [ "$status" = "true" ]; then
        echo "@@ SUCCESS: $msg";
        return 0;
    fi
    echo "@@ BUILD: $msg";
    return 0;
}

_exit() {
    local msg="$1";
    echo "!! $msg";
    exit 0;
}

_false() {
    local msg="$1";
    _echo "$msg" "false";
    exit 1;
}

_true() {
    local msg="$1";
    _echo "$msg" "true";
    exit 0;
}

_check_cmd() {
    local cmd nf;
    cmd="perl gcc g++ cmake make nasm autoconf ";
    cmd+="automake sed install libtool patch find cat ";
    cmd+="rm grep egrep rsync wget date cp mv xargs";
    nf="";
    for x in $cmd; do
        if ! type -p $x &>/dev/null; then
            nf+="${x} ";
        fi
    done
    [ -n "${nf}" ] && {
        _false "This software require '$(trim "${nf}")' command";
    }
}
_check_cmd;
trap "{ _exit 'Quit Abort'; exit 1; }" SIGINT SIGTERM SIGHUP SIGKILL SIGABRT;

# setting
_BUILD_PATH="$(dirname $0)";
[ $_BUILD_PATH = "." ] && _BUILD_PATH="$(pwd)";
[ ! -f "$_BUILD_PATH/build.d/cenbia-version" ] && _false "Version file not found";

_WITHOUT_MAN="${_WITHOUT_MAN:-"no"}";
_WITHOUT_DOC="${_WITHOUT_DOC:-"no"}";
_WITHOUT_INFO="${_WITHOUT_INFO:-"no"}";
_WITHOUT_STATIC="${_WITHOUT_STATIC:-"no"}";
_WITHOUT_DEV="${_WITHOUT_DEV:-"no"}";
_WITHOUT_STRIP="${_WITHOUT_STRIP:-"no"}";
_WITHOUT_UTILS="${_WITHOUT_UTILS:-"no"}";
_REBUILD="${_REBUILD:-"no"}";

# mandatory
_UTILS_BIN="curl openssl iconv php php-fpm php-cgi ";
_UTILS_BIN+="httpd mysqld mysql checkport ";
_UTILS_BIN+="cenbia cenbia-first-setup cenbia-start cenbia-stop cenbia-restart";

export _CENBIA_VERSION="$(_gfile $_BUILD_PATH/build.d/cenbia-version)";
export _CENBIA_BUILD_PATH=$_BUILD_PATH;
export _CENBIA_ROOT_PATH="${_CENBIA_ROOT_PATH:-"/opt/cenbia"}";
export _CENBIA_INST_PATH="${_CENBIA_INST_PATH:-"${_CENBIA_ROOT_PATH}/stack"}";
export _CENBIA_LIB_PATH="${_CENBIA_LIB_PATH:-"${_CENBIA_INST_PATH}/lib"}";
export _CENBIA_SHARE_PATH="${_CENBIA_SHARE_PATH:-"${_CENBIA_INST_PATH}/share"}";
export _CENBIA_MAN_PATH="${_CENBIA_MAN_PATH:-"${_CENBIA_SHARE_PATH}/man"}";
export _CENBIA_DOC_PATH="${_CENBIA_DOC_PATH:-"${_CENBIA_SHARE_PATH}/doc"}";
export CC="gcc";
export SMPFLAGS="-j2";


_copydev() {
    local src="$1";
    _echo "Copying $src";
    if [ -n "$src" -a "$src" != "/" -a -n "${_CENBIA_ROOT_PATH}" -a "${_CENBIA_ROOT_PATH}" != "/" ]; then
        [ ! -d "${_CENBIA_ROOT_PATH}-devel" ] && mkdir -p ${_CENBIA_ROOT_PATH}-devel;
        if [ ! -d "${_CENBIA_ROOT_PATH}-devel" ]; then
            _false "Cannot create development files";
        fi
        if [ -e $src ]; then
            cp -fau -P -p --parents $src ${_CENBIA_ROOT_PATH}-devel/;
            if [ $? = 0 ]; then
                rm -rf $src;
            fi
        fi
    fi
}
_copydev_done() {
    local dname="$(dirname $_CENBIA_ROOT_PATH)";
    local fname="$(basename $_CENBIA_ROOT_PATH)";
    if [ -d "${_CENBIA_ROOT_PATH}-devel" ] && [ -d "${_CENBIA_ROOT_PATH}-devel/${_CENBIA_ROOT_PATH}" ]; then
        rm -rf ${_CENBIA_ROOT_PATH}-devel/${_CENBIA_ROOT_PATH}/.build;
        mv ${_CENBIA_ROOT_PATH}-devel/${_CENBIA_ROOT_PATH} ${_CENBIA_ROOT_PATH}-devel/;
        if cd ${_CENBIA_ROOT_PATH}-devel; then
            local fdv="cenbia-${_CENBIA_VERSION}-${_ARCH}-devel.tar.gz";
            tar -zcf $fdv cenbia;
            if [ $? = 0 ]; then
                mv $fdv  $_BUILD_PATH;
            fi
        fi
        cd $_BUILD_PATH;
        rm -rf ${_CENBIA_ROOT_PATH}-devel;
        if cd $dname; then
            if [ -d "${fname}" ]; then
                local fdr="cenbia-${_CENBIA_VERSION}-${_ARCH}.tar.gz";
                tar --exclude="*/.build" -zcf $_BUILD_PATH/$fdr $fname;

            fi
        fi

        cd $_BUILD_PATH;
        if [ "$?" = "0" -a -f "${fdv}" -a -n "${dname}" ]; then
            tar -C $dname/ -zxvf $fdv
        fi

        [ -f $fdr ] && _echo "Release file: ${_BUILD_PATH}/${fdr}";
        [ -f $fdv ] && _echo "Development file: ${_BUILD_PATH}/${fdr}";
    fi
}

# set source file
_BUILD_SOURCE="${_BUILD_SOURCE:-"${_BUILD_PATH}/build.d/source.list"}";
[ ! -f $_BUILD_SOURCE ] && _false "${_BUILD_SOURCE} not found";

_PACKAGE="$(_gfile ${_BUILD_SOURCE})";

# bin exclude, never remove
_BIN_LIST="${_BUILD_PATH}/build.d/utils-bin.list";
if [ -f $_BIN_LIST ]; then
    _UTILS_BIN+=" $(_gfile ${_BIN_LIST})";
fi


_DOSET() {
    if [ -n "$1" -a "$1" = "dist" ]; then
        _WITHOUT_MAN="yes";
        _WITHOUT_DOC="yes";
        _WITHOUT_INFO="yes";
        _WITHOUT_STATIC="yes";
        _WITHOUT_DEV="yes";
        _WITHOUT_STRIP="no";
        _WITHOUT_UTILS="yes";
    else
        _WITHOUT_MAN="no";
        _WITHOUT_DOC="no";
        _WITHOUT_INFO="no";
        _WITHOUT_STATIC="no";
        _WITHOUT_DEV="no";
        _WITHOUT_STRIP="yes";
        _WITHOUT_UTILS="no";
    fi
}

_CLEAN() {
    if [ -n "${_REBUILD}" -a "${_REBUILD}" = "yes" -a -d "${_CENBIA_ROOT_PATH}" -a "${_CENBIA_ROOT_PATH}" != "/" ]; then
        read -p "This operation will remove ${_CENBIA_ROOT_PATH}, are you want to proceed [Y/N/C]: " ans;
        while [ "$ans" != "Y" -a "$ans" != "y" -a "$ans" != "N" -a "$ans" != "n" -a "$ans" != "C" -a "$ans" != "c" ]; do
            echo "Please enter Y or N. C for cancel";
            read -p "This operation will remove ${_CENBIA_ROOT_PATH} [Y/N]: " ans;
        done
        [ "$ans" = "C" -o "$ans" = "c" ] && _exit "Cancel";
        if [ "$ans" = "Y" -o "$ans" = "y" -a -d "${_CENBIA_ROOT_PATH}" ]; then
            rm -rfv ${_CENBIA_ROOT_PATH};
        fi
    fi
}

_COPYLIB() {
    if [ -f "${_BUILD_PATH}/build.d/copylib.sh" ]; then
        [ "x$1" = "x" ] && _echo "Copying library..";
        $_BUILD_PATH/build.d/copylib.sh &>/dev/null;
    fi
}

_DOBUILD() {
    local f="$1";
    [ -z "${f}" ] && return 1;
    if [ -f "$_CENBIA_ROOT_PATH/.build/$f" ]; then
        _echo "$f :: Done";
        return 1;
    fi

    _echo $f;

    _path="./source/$f";
    if ! cd $_path &>/dev/null; then
        _false "Failed to build $f";
    fi
    if [ ! -f "./$f.build" ]; then
        _false "$f.build not found";
    fi
    ./$f.build;
    if [ $? -ne 0 ]; then
        _false "Failed to build $f";
    else
        [ ! -d "${_CENBIA_ROOT_PATH}/.build" ] && mkdir -p $_CENBIA_ROOT_PATH/.build;
        date > $_CENBIA_ROOT_PATH/.build/$f;
    fi
    if [ -d "./license" ]; then
        [ ! -d "${_CENBIA_ROOT_PATH}/licenses" ] && mkdir -p $_CENBIA_ROOT_PATH/licenses;
        cp -fa ./license $_CENBIA_ROOT_PATH/licenses/$f;
    fi
    cd $_BUILD_PATH;
}

_BUILD() {
    if [ ! -d "${_CENBIA_ROOT_PATH}/.build" ]; then
        mkdir -p $_CENBIA_ROOT_PATH/.build;
    fi
    if [ ! -d "${_CENBIA_ROOT_PATH}/licenses" ]; then
        mkdir -p $_CENBIA_ROOT_PATH/licenses;
    fi
    for f in $_PACKAGE; do
        _DOBUILD $f;
    done

    if [ -n "${_WITHOUT_DEV}" -a "${_WITHOUT_DEV}" != "yes" ]; then
        _COPYLIB;
    fi
    _echo "All Done";
}

_FINISH() {
    if [ -n "${_CENBIA_INST_PATH}" -a "${_CENBIA_INST_PATH}" != "/" -a "${_CENBIA_INST_PATH}" != "." ]; then
        
        if [ -n "${_WITHOUT_MAN}" -a "${_WITHOUT_MAN}" = "yes" ]; then
            _copydev $_CENBIA_INST_PATH/share/man;
            _copydev $_CENBIA_INST_PATH/share/httpd/manual;
        fi
        
        if [ -n "${_WITHOUT_DOC}" -a "${_WITHOUT_DOC}" = "yes" ]; then
            _copydev $_CENBIA_INST_PATH/share/doc;
            _copydev $_CENBIA_INST_PATH/share/gtk-doc;
        fi
        

        if [ -n "${_WITHOUT_INFO}" -a "${_WITHOUT_INFO}" = "yes" ]; then
            _copydev $_CENBIA_INST_PATH/share/info;
        fi
        

        if [ -n "${_WITHOUT_STATIC}" -a "${_WITHOUT_STATIC}" = "yes" ]; then
            for f in $(find $_CENBIA_INST_PATH/lib/ -name "*.a*"); do
                _copydev $f;
            done
        fi
        

        if [ -n "${_WITHOUT_DEV}" -a "${_WITHOUT_DEV}" = "yes" ]; then
            for f in $(find $_CENBIA_INST_PATH/lib/ -name "*.a*"); do
                _copydev $f;
            done
            for f in $(find $_CENBIA_INST_PATH/lib/ -name "*.la*"); do
                _copydev $f;
            done
            for f in $(find $_CENBIA_INST_PATH/ -name "*-config"); do
                _copydev $f;
            done
            for f in $(find $_CENBIA_INST_PATH/ -name "*.exp"); do
                _copydev $f;
            done
            _copydev $_CENBIA_INST_PATH/share/aclocal;
            _copydev $_CENBIA_INST_PATH/include;
            _copydev $_CENBIA_INST_PATH/share/mysql-test;
            _copydev $_CENBIA_INST_PATH/share/mysql-bench;
            _copydev $_CENBIA_INST_PATH/lib/xml2Conf.sh;
            _copydev $_CENBIA_INST_PATH/lib/xsltConf.sh;
            _copydev $_CENBIA_INST_PATH/lib/pkgconfig;
            _copydev $_CENBIA_INST_PATH/bin/pkg-config;
            _copydev $_CENBIA_INST_PATH/man;

            _copydev $_CENBIA_INST_PATH/pear;
            _copydev $_CENBIA_INST_PATH/etc/php/pear.conf;
            _copydev $_CENBIA_INST_PATH/lib/php/build;
            _copydev $_CENBIA_INST_PATH/lib/httpd/build;
            _copydev $_CENBIA_INST_PATH/lib/icu;
            _copydev $_CENBIA_INST_PATH/lib/gettext;

        fi
       
        if [ -n "${_WITHOUT_STRIP}" -a "${_WITHOUT_STRIP}" = "no" ]; then
            for f in $(find $_CENBIA_INST_PATH/lib/ -name "*.so*"); do
                [ ! -L $f -a ! -d $f ] && strip --strip-debug --strip-unneeded $f &>/dev/null;
            done
            for f in $_CENBIA_INST_PATH/bin/*; do
                [ ! -L $f -a ! -d $f ] && strip --strip-debug --strip-unneeded $f &>/dev/null;
            done
        fi

        if [ -n "${_WITHOUT_UTILS}" -a "${_WITHOUT_UTILS}" = "yes" ]; then
            if [ -n "${_UTILS_BIN}" ]; then
                mkdir $_CENBIA_INST_PATH/bin/.tmp
                for x in ${_UTILS_BIN}; do
                    [ -f $_CENBIA_INST_PATH/bin/$x ] && mv $_CENBIA_INST_PATH/bin/$x $_CENBIA_INST_PATH/bin/.tmp/
                done
            fi
            for f in $_CENBIA_INST_PATH/bin/*; do
                _copydev $f;
            done
            if [ -d $_CENBIA_INST_PATH/bin/.tmp ]; then
                mv $_CENBIA_INST_PATH/bin/.tmp/* $_CENBIA_INST_PATH/bin/ &>/dev/null;
                rm -rf $_CENBIA_INST_PATH/bin/.tmp
            fi
        fi
    fi

    if [ -f "${_BUILD_PATH}/build.d/cenbia-environment" ]; then
        [ ! -d "${_CENBIA_INST_PATH}/etc" ] && mkdir -p  $_CENBIA_INST_PATH/etc;
        cp -f ${_BUILD_PATH}/build.d/cenbia-environment $_CENBIA_INST_PATH/etc/cenbia-environment;
        sed -i -e "s|@INST_DIR|$_CENBIA_INST_PATH|g" $_CENBIA_INST_PATH/etc/cenbia-environment;
        sed -i -e "s|@ROOT_DIR|$_CENBIA_ROOT_PATH|g" $_CENBIA_INST_PATH/etc/cenbia-environment;
    fi
    if [ -f "${_BUILD_PATH}/build.d/console.sh" ]; then
        _cbin="${_CENBIA_ROOT_PATH}/cenbia";
        cp -f ${_BUILD_PATH}/build.d/console.sh $_cbin;
        sed -i -e "s|@ROOT_DIR|$_CENBIA_ROOT_PATH|g" $_cbin;
        sed -i -e "s|@INST_DIR|$_CENBIA_INST_PATH|g" $_cbin;
        chmod 755 $_cbin;
    fi
    if [ -f "${_BUILD_PATH}/build.d/cenbia-start.sh" ]; then
        _cbin="${_CENBIA_INST_PATH}/bin/cenbia-start";
        cp -f ${_BUILD_PATH}/build.d/cenbia-start.sh $_cbin;
        sed -i -e "s|@ROOT_DIR|$_CENBIA_ROOT_PATH|g" $_cbin;
        sed -i -e "s|@INST_DIR|$_CENBIA_INST_PATH|g" $_cbin;
        chmod 755 $_cbin;
        cwd=$(pwd);
        if cd $_CENBIA_INST_PATH/bin; then
            ln -sf cenbia-start cenbia-stop;
            ln -sf cenbia-start cenbia-restart;
            cd $cwd;
        fi
    fi
    if [ -f "${_BUILD_PATH}/build.d/cenbia-first-setup.sh" ]; then
        _cbin="${_CENBIA_INST_PATH}/bin/cenbia-first-setup";
        cp -f ${_BUILD_PATH}/build.d/cenbia-first-setup.sh $_cbin;
        sed -i -e "s|@ROOT_DIR|$_CENBIA_ROOT_PATH|g" $_cbin;
        sed -i -e "s|@INST_DIR|$_CENBIA_INST_PATH|g" $_cbin;
        chmod 755 $_cbin;
    fi

    [ -d "${_CENBIA_INST_PATH}/etc/init.d" ] && rm -rf $_CENBIA_INST_PATH/etc/init.d;

    for f in cenbia-version readme-bin.txt; do
        if [ ! -f "${_BUILD_PATH}/build.d/${f}" ]; then
            _false "$f not found!";
        fi
    done

    cp $_BUILD_PATH/build.d/cenbia-version $_CENBIA_INST_PATH/version;
    cp $_BUILD_PATH/build.d/readme-bin.txt $_CENBIA_ROOT_PATH/README;
    sed -i -e "s|@INST_DIR|$_CENBIA_INST_PATH|g" $_CENBIA_ROOT_PATH/README;
    sed -i -e "s|@ROOT_DIR|$_CENBIA_ROOT_PATH|g" $_CENBIA_ROOT_PATH/README;

    if [ -n "${_WITHOUT_DEV}" -a "${_WITHOUT_DEV}" = "yes" ]; then
        [ -d "${_CENBIA_INST_PATH}/libsys" ] && rm -rf $_CENBIA_INST_PATH/libsys;
        _COPYLIB q;
    fi
    _copydev_done;
}

_HELP() {
_cat << _END_

Usage: $0 [option..] | [source]

$0 --clean                          - will clean installation directory
$0 --rebuild                        - rebuild all source
$0 --dev                            - (default) build and install with development file
$0 --dist                           - build and install without development file
$0 --pkg-clean                      - remove all downloaded source package
$0 --pkg-info                       - show source information
$0 <option above> <source name>..   - build one or more source by supply source name

Example
-------
1) Compile everything
    $0 

2) If everything OK, you want to distribute it
    $0 --dist

    development file will compress as cenbia-<version>-<arch>-devel.tar.gz
    eg; cenbia-beta1-64bit-devel.tar.gz

3) Something went wrong, compiling error.
    $0 --rebuild <source name>
    or
    cd ./source/<source name> and enter ./<source name>.build to debug.
    eg; 
        cd ./bzip2 
        ./bzip2.build


Environment
-----------
_CENBIA_ROOT_PATH   - root installation directory
                      by default install to $_CENBIA_ROOT_PATH

If you want to change it use command below:

\$ export _CENBIA_ROOT_PATH=<another path>
\$ $0 

_END_

exit 2;
}

_PKG_INFO() {
    if [ -d "${_BUILD_PATH}/source" ]; then
        for d in $_BUILD_PATH/source/*/*.build; do
            nm="$(basename $d .build)";
            ver="$(grep ^VER= $d |sed -e 's|VER=||g' -e 's|"||g' -e 's|;||g')";
            echo "$nm : $ver";
            echo "==============";
            grep ^NAME= $d;
            grep ^VER= $d;
            grep ^DLURL= $d;
            grep ^DLURL\+= $d;
            grep ^USER= $d;
            grep ^GROUP= $d;
            grep _NAME= $d;
            grep _VER= $d;
            grep _DLURL= $d;
            grep _DLURL\+= $d;
            grep _USER= $d;
            grep _GROUP= $d;
            echo "";
        done
    fi
    exit 0;
}

_PKG_CLEAN() {
    for f in $(find ./source/ -name "*.gz") $(find ./source/ -name "*.bz2") $(find ./source/ -name "*.tgz") $(find ./source/ -name "*.tbz2"); do
        rm -fv $f;
    done
    rm -fv ./tarball/*.gz;
    rm -fv ./tarball/*.tgz;
    rm -fv ./tarball/*.bz2;
    rm -fv ./tarball/*.tbz2;
    exit 0;
}

_HELLO() {
_cat << _END_

Cenbia BuildStack $(date)
Type '$0 -h' for options

_END_
}
_MAIN() {
    local _ok=0;
    for arg do
        case "${arg}" in
            "--dist" | "-dist" | "-r" )
                _DOSET "dist";
                _BUILD;
                _ok=1;
            ;;
            "--dev" | "-dev" | "-d" )
                _DOSET "dev";
                _CLEAN;
                _BUILD;
                _ok=1;
            ;;
            "--clean" | "-clean" | "-c" )
                _CLEAN;
                _ok=2;
            ;;
            "--rebuild" | "-rebuild" | "-R" )
                _REBUILD="yes";
                if [ -d "${_CENBIA_ROOT_PATH}/.build" ]; then
                    rm -rf $_CENBIA_ROOT_PATH/.build;
                fi
                _ok=2;
            ;;
            "--pkg-clean" | "-pkg-clean" | "-pc" )
                _PKG_CLEAN;
            ;;
            "--pkg-info" | "-pkg-info" | "-pi" )
                _PKG_INFO;
            ;;
            "--help" | "-help" | "-h" )
                _HELP;
            ;;
            * )
            if [ -n "${arg}" -a -d "${_BUILD_PATH}/source/${arg}" ]; then
                if [ -n "${_CENBIA_ROOT_PATH}" -a ! -d "${_CENBIA_ROOT_PATH}" -a ! -d "${_CENBIA_INST_PATH}/include" ]; then
                    echo "Development directory not setup yet, run '$0 --dev' first";
                    exit 1;
                fi
                [ -f "${_CENBIA_ROOT_PATH}/.build/${arg}" ] && rm -f $_CENBIA_ROOT_PATH/.build/$arg;
                _DOSET "dev";
                _DOBUILD $arg;
                _ok=1;

            fi
        esac
    done
    if [ "${_ok}" != "1" ]; then
        _HELLO;
        _DOSET "dev";
        _CLEAN;
        _BUILD;
        _ok=1;
    fi

    if [ "${_ok}" = "1" ]; then
        _FINISH;
        exit 0;
    fi
    _HELP;
}

_MAIN $@;
exit 0;
