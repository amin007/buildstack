#!/bin/bash
source @ROOT_DIR/scripts/bootstrap.sh &>/dev/null || { echo "Bootstrap failed"; exit 1; };
user="@USER";
group="@USER";
basedir="@INST_DIR";
bindir="@BIN_DIR";
config="@CONFIG_DIR/my.cnf";
exec="${bindir}/mysqld_safe";
print_defaults="${bindir}/my_print_defaults";
prog="mysqld";

STARTTIMEOUT=120
STOPTIMEOUT=60

get_mysql_option() {
	result="$($print_defaults --defaults-file=$config "$1" | sed -n "s/^--$2=//p" | tail -n 1)";
	if [ -z "$result" ]; then
	    result="$3";
	fi
}

get_mysql_option mysqld user "@USER";
user="$result";
group="$result";
get_mysql_option mysqld datadir "@DATA_DIR";
datadir="$result";
get_mysql_option mysqld socket "@SOCKET";
socketfile="$result";
get_mysql_option mysqld_safe log-error "@LOG_FILE";
errlogfile="$result";
get_mysql_option mysqld_safe pid-file "@PID_FILE";
mypidfile="$result";


start() {
    [ -x $exec ] || exit 5;
    # check to see if it's already running
    RESPONSE="$(mysqladmin --socket="$socketfile" --user=UNKNOWN_MYSQL_USER ping 2>&1)";
    if [ $? = 0 ]; then
        # already running, do nothing
        _msg "Starting $prog" && _success;
        ret=0
    elif echo "$RESPONSE" | grep -q "Access denied for user"; then
        # already running, do nothing
        _msg "Starting $prog" && _success;
        ret=0
    else
    	# prepare for start
        touch "$errlogfile";
        chown $user:$group "$errlogfile" ;
        chmod 0640 "$errlogfile";
        if [ ! -d "$datadir/mysql" ] ; then
	        # First, make sure $datadir is there with correct permissions
	        if [ ! -e "$datadir" -a ! -h "$datadir" ]; then
                mkdir -p "$datadir" || exit 1
	        fi
	        chown $user:$group "$datadir";
	        chmod 0755 "$datadir";

	        _msg "Initializing MySQL database";
            mysql_install_db --skip-name-resolve --datadir="$datadir" --user=$user &>/dev/null;
	        ret=$?
            chown -R $user:$group "$datadir";
            if [ $ret -ne 0 ] ; then
                _failure;
                return $ret
            fi
            _success;
        fi
	    chown $user:$group "$datadir";
	    chmod 0755 "$datadir";

        _msg "Starting $prog";
        $exec --defaults-file=$config --basedir=$basedir --datadir="$datadir" --socket="$socketfile" \
            --pid-file="$mypidfile" \
            --user=$user >/dev/null 2>&1 &
        safe_pid=$!;

        ret=0;

        TIMEOUT="$STARTTIMEOUT";
        while [ $TIMEOUT -gt 0 ]; do
            RESPONSE="$(mysqladmin --socket="$socketfile" --user=UNKNOWN_MYSQL_USER ping 2>&1)" && break
            echo "$RESPONSE" | grep -q "Access denied for user" && break;
            if ! kill -0 $safe_pid 2>/dev/null; then
                _msg "MySQL Daemon failed to start."
                ret=1
                break
            fi
            _printdot;
            sleep 1;
            let TIMEOUT=${TIMEOUT}-1;
        done

        if [ $TIMEOUT -eq 0 ]; then
            _msg "Timeout error occurred trying to start MySQL Daemon."
            ret=1;
        fi

        if [ $ret -eq 0 ]; then
            _success;
        else
            _failure;
        fi
    fi
    return $ret;
}

stop() {
	if [ ! -f "$mypidfile" ]; then
	    _msg "Stopping $prog" && _success;
	    return 0;
	fi
    _msg "Stopping $prog";
    MYSQLPID="$(< $mypidfile)";
	if [ -n "$MYSQLPID" ]; then
	    kill "$MYSQLPID" >/dev/null 2>&1
	    ret=$?;
	    if [ $ret -eq 0 ]; then
            TIMEOUT="$STOPTIMEOUT";
            while [ $TIMEOUT -gt 0 ]; do
                kill -0 "$MYSQLPID" >/dev/null 2>&1 || break
                _printdot;
                sleep 1;
                let TIMEOUT=${TIMEOUT}-1;
            done
            if [ $TIMEOUT -eq 0 ]; then
                echo "Timeout error occurred trying to stop MySQL Daemon."
                ret=1
                _failure;
            else
                rm -f "$socketfile";
                _success;
            fi
        else
            _failure;
        fi
    else
	    _failure;
	    ret=4;
    fi
	return $ret;
}
 
restart(){
    stop;
    start;
}

status() {
    if [ -f "$mypidfile" ]; then
        MYSQLPID="$(< $mypidfile)";
        if kill -0 $MYSQLPID 2>/dev/null ; then 
            echo "MySQL running ($MYSQLPID)";
            exit 0;
        else
            echo "MySQL is not running";
            rm -f $mysqld_pid;
            exit 1;
        fi
    fi
    MYSQLPID="$(pidof ${bindir}/mysqld)";
    if [ -n "${MYSQLPID}" ]; then
        echo "MySQL running ($MYSQLPID)";
        exit 0;
    fi
    echo "MySQL is not running";
    exit 1;
}

reload() {
    _msg "Reloading service MySQL";
    if [ -f "$mypidfile" ]; then
        MYSQLPID="$(< $mypidfile)";
        if kill -HUP $MYSQLPID 2>/dev/null ; then 
            _success;
            exit 0;
        else
            _failure;
            exit 1;
        fi
    fi
     MYSQLPID="$(pidof ${bindir}/mysqld)";
    if [ -n "${MYSQLPID}" ]; then
        if kill -HUP $MYSQLPID 2>/dev/null ; then 
            _success;
            exit 0;
        fi
    fi
    _failure;
    exit 1;
}

# See how we were called.
case "$1" in
  start)
    start
    ;;
  stop)
    stop
    ;;
  status)
    status
    ;;
  restart)
    restart
    ;;
  reload)
    reload
    ;;
  *)
    echo "Usage: $0 {start|stop|status|restart|reload}"
    exit 2;
esac

exit $?;

